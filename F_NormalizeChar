(OriginalText as text) as text =>
let
    L_Katakana = List.Zip(
        {{"｡","｢","｣","､","･","ｧ","ｱ","ｨ","ｲ","ｩ","ｳ","ｪ","ｴ","ｫ","ｵ","ｶ","カﾞ","ｷ","キﾞ","ｸ","クﾞ","ｹ","ケﾞ","ｺ","コﾞ","ｻ","サﾞ","ｼ","シﾞ","ｽ","スﾞ","ｾ","セﾞ","ｿ","ソﾞ","ﾀ","タﾞ","ﾁ","チﾞ","ｯ","ﾂ","ツﾞ","ﾃ","テﾞ","ﾄ","トﾞ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ハﾞ","ハﾟ","ﾋ","ヒﾞ","ヒﾟ","ﾌ","フﾞ","フﾟ","ﾍ","ヘﾞ","ヘﾟ","ﾎ","ホﾞ","ホﾟ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ｬ","ﾔ","ｭ","ﾕ","ｮ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ｦ","ﾝ"},{"。","「","」","、","・","ァ".."ロ","ワ","ヲ","ン"}}
    ),
    L_Alphabet = List.Zip(
        {{Character.FromNumber(0x3000), "！".."～"},{Character.FromNumber(0x20), "!".."~"}}
    ),
    L_Combination = List.Combine({L_Katakana, L_Alphabet}),
    ReplacedText = (
        List.Accumulate(Text.ToList(OriginalText),"",(state, current) => 
            if
                current = "ﾞ" or current ="ﾟ"
            then
                Text.Start(state,Text.Length(state)-1) &
                List.Single(List.ReplaceMatchingItems({Text.End(state,1) & current},L_Combination)) 
            else
                state & List.Single(List.ReplaceMatchingItems({current},L_Combination))
        )
    )
in
    ReplacedText
