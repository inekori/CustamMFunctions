(OriginalText as text) as text =>
let
    L_Combination = List.Zip(
        {{"｡","｢","｣","､","･","ｧ","ｱ","ｨ","ｲ","ｩ","ｳ","ｪ","ｴ","ｫ","ｵ","ｶ","ｶﾞ","ｷ","ｷﾞ","ｸ","ｸﾞ","ｹ","ｹﾞ","ｺ","ｺﾞ","ｻ","ｻﾞ","ｼ","ｼﾞ","ｽ","ｽﾞ","ｾ","ｾﾞ","ｿ","ｿﾞ","ﾀ","ﾀﾞ","ﾁ","ﾁﾞ","ｯ","ﾂ","ﾂﾞ","ﾃ","ﾃﾞ","ﾄ","ﾄﾞ","ﾅ","ﾆ","ﾇ","ﾈ","ﾉ","ﾊ","ﾊﾞ","ﾊﾟ","ﾋ","ﾋﾞ","ﾋﾟ","ﾌ","ﾌﾞ","ﾌﾟ","ﾍ","ﾍﾞ","ﾍﾟ","ﾎ","ﾎﾞ","ﾎﾟ","ﾏ","ﾐ","ﾑ","ﾒ","ﾓ","ｬ","ﾔ","ｭ","ﾕ","ｮ","ﾖ","ﾗ","ﾘ","ﾙ","ﾚ","ﾛ","ﾜ","ｦ","ﾝ"},{"。","「","」","、","・","ァ".."ロ","ワ","ヲ","ン"}}
    ),
    ReplacedText = (
        List.Accumulate(Text.ToList(OriginalText),"",(state, current) => 
            if Text.End(state,1) = "ﾞ" or Text.End(state,1) ="ﾟ"
            then 
                Text.Start(state,Text.Length(state)-2) &

                List.Single(
                    List.ReplaceMatchingItems({Text.End(state,2)},L_Combination)
                ) &

                List.Single(List.ReplaceMatchingItems({current},L_Combination))
            else
                state & List.Single(List.ReplaceMatchingItems({current},L_Combination))
        )
    )

in
    ReplacedText
